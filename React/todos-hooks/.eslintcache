[{"C:\\xampp\\htdocs\\JAVASCRIPT\\React\\todos-hooks\\src\\index.js":"1","C:\\xampp\\htdocs\\JAVASCRIPT\\React\\todos-hooks\\src\\App.js":"2","C:\\xampp\\htdocs\\JAVASCRIPT\\React\\todos-hooks\\src\\components\\todo\\TodoList.js":"3","C:\\xampp\\htdocs\\JAVASCRIPT\\React\\todos-hooks\\src\\components\\todo\\api\\useAPI.js":"4"},{"size":267,"mtime":1608125117702,"results":"5","hashOfConfig":"6"},{"size":2001,"mtime":1608213477940,"results":"7","hashOfConfig":"6"},{"size":2937,"mtime":1608213781677,"results":"8","hashOfConfig":"6"},{"size":418,"mtime":1608208050256,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"bi7oyi",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"12"},"C:\\xampp\\htdocs\\JAVASCRIPT\\React\\todos-hooks\\src\\index.js",[],["22","23"],"C:\\xampp\\htdocs\\JAVASCRIPT\\React\\todos-hooks\\src\\App.js",["24"],"import React, { useReducer } from 'react';\nimport TodoList from './components/todo/TodoList';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\n// Initialise initialState\nconst initialState = {\n  todos: [],\n};\n\n//Create the centralized store\nexport const TodosContext = React.createContext();\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    // we make use of TodosContext to make state and dispatch available to child components\n    <TodosContext.Provider value={{ state, dispatch }}>\n      <TodoList />\n    </TodosContext.Provider>\n  );\n}\n\n// reducer function : reducer will take some state, and based on action, it will figure out, what to with our state\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'get':\n      return { ...state, todos: action.payload };\n    case 'delete':\n      const filteredTodoState = state.todos.filter(\n        (todo) => todo.id !== action.payload.id\n      );\n      return { ...state, todos: filteredTodoState };\n\n    case 'add':\n      //add new todo onto array\n      // const newTodo = { id: uuidv4(), text: action.payload };\n      //spread our state and assign todos\n      const addedTodos = [...state.todos, action.payload];\n\n      return { ...state, todos: addedTodos }; //Return a new array\n\n    case 'edit':\n      //current todo or todo to be edited\n      const updatedTodo = { ...action.payload };\n      //get the index of the the selected element\n      const updatedTodoIndex = state.todos.findIndex(\n        (t) => t.id === action.payload.id\n      );\n      const updatedTodos = [\n        //Get the items before the selected element\n        ...state.todos.slice(0, updatedTodoIndex),\n        //element to be updated\n        updatedTodo,\n        //get the items after the selected element\n        ...state.todos.slice(updatedTodoIndex + 1),\n      ];\n\n      return { ...state, todos: updatedTodos }; //Return a new array\n    default:\n      return initialState;\n  }\n}\n\nexport default App;\n","C:\\xampp\\htdocs\\JAVASCRIPT\\React\\todos-hooks\\src\\components\\todo\\TodoList.js",["25","26"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport axios from 'axios';\r\nimport useAPI from './api/useAPI';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { TodosContext } from './../../App';\r\nimport { Table, Form, Button } from 'react-bootstrap';\r\n\r\nconst TodoList = () => {\r\n  //using the useContext() we receiving state and dispatch from App.js\r\n  const { state, dispatch } = useContext(TodosContext);\r\n  //Using useState()\r\n  const [todoText, setTodoText] = useState('');\r\n  //Edit state\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editTodo, setEditTodo] = useState(null);\r\n\r\n  //button switch between 'Edit' and 'Add'\r\n  const buttonTitle = editMode ? 'Edit' : 'Add';\r\n\r\n  //using the endpoint\r\n  const endpoint = 'http://localhost:3000/todos/';\r\n  const savedTodos = useAPI(endpoint);\r\n\r\n  //Use useEffect()\r\n  useEffect(() => {\r\n    dispatch({ type: 'get', payload: savedTodos });\r\n  }, [savedTodos]);\r\n\r\n  //Handle handleSubmit()\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (editMode) {\r\n      await axios.patch(endpoint + editTodo.id, { text: todoText });\r\n      dispatch({ type: 'edit', payload: { ...editTodo, text: todoText } });\r\n      setEditMode(false);\r\n      setEditTodo(null);\r\n    } else {\r\n      const newTodo = { id: uuidv4(), text: todoText };\r\n      const response = await axios.post(endpoint, newTodo);\r\n      dispatch({ type: 'add', payload: newTodo });\r\n    }\r\n    setTodoText('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Enter To Do'\r\n            onChange={(event) => setTodoText(event.target.value)}\r\n            value={todoText}\r\n          />\r\n        </Form.Group>\r\n        <Button variant='primary' type='submit'>\r\n          {buttonTitle}\r\n        </Button>\r\n      </Form>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>To do</th>\r\n            <th>Edit</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {state.todos.map((todo) => (\r\n            <tr key={todo.id}>\r\n              <td>{todo.text}</td>\r\n              <td\r\n                onClick={() => {\r\n                  setTodoText(todo.text);\r\n                  setEditMode(true);\r\n                  setEditTodo(todo);\r\n                }}>\r\n                <Button variant='link'>Edit</Button>\r\n              </td>\r\n              <td\r\n                onClick={async () => {\r\n                  await axios.delete(endpoint + todo.id);\r\n                  dispatch({ type: 'delete', payload: todo }); //payload holds the actual data in the redux action object\r\n                }}>\r\n                <Button variant='link'>Delete</Button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","C:\\xampp\\htdocs\\JAVASCRIPT\\React\\todos-hooks\\src\\components\\todo\\api\\useAPI.js",["27"],"import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useAPI = (endpoint) => {\r\n  const [data, setData] = useState([]);\r\n  //To call data when component is mounted\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    const res = await axios.get(endpoint);\r\n    setData(res.data);\r\n  };\r\n  console.log(data);\r\n  return data;\r\n};\r\n\r\nexport default useAPI;\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":3,"column":16,"nodeType":"34","messageId":"35","endLine":3,"endColumn":22},{"ruleId":"36","severity":1,"message":"37","line":27,"column":6,"nodeType":"38","endLine":27,"endColumn":18,"suggestions":"39"},{"ruleId":"32","severity":1,"message":"40","line":39,"column":13,"nodeType":"34","messageId":"35","endLine":39,"endColumn":21},{"ruleId":"36","severity":1,"message":"41","line":9,"column":6,"nodeType":"38","endLine":9,"endColumn":8,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'uuidv4' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["45"],"'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["46"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},"Update the dependencies array to be: [dispatch, savedTodos]",{"range":"51","text":"52"},"Update the dependencies array to be: [getData]",{"range":"53","text":"54"},[931,943],"[dispatch, savedTodos]",[235,237],"[getData]"]